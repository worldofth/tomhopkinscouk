{"version":3,"sources":["styleguide/base.less","base/variables/typevars.less","base/mixins/grid_mixins.less","base/mixins/flexmixins.less","base/mixins/prefixmixins.less","base/animation/easing.less"],"names":[],"mappings":"AAwBA,MAQK,YACG,cAAA,KACA,YC9B4C,iBD8B5C,OAAA,YAlCR,SEmCE,MAAA,KCXA,QAAA,YACA,QAAA,SACA,QAAA,QACA,QAAA,OACA,QAAA,IAIA,QAAA,YAIA,QAAA,aACA,QAAA,UACA,QAAA,SACA,QAAA,QACA,QAAA,KA0LA,cAAA,SACA,kBAAA,SACA,eAAA,SACA,cAAA,SACA,aAAA,SACA,UAAA,SAsCA,kBAAA,KACA,eAAA,KACA,cAAA,KACA,aAAA,KACA,UAAA,KAmJA,mBAAA,MAEA,sBAAA,WACA,mBAAA,WACA,iBAAA,WACA,cAAA,WHvaE,aACI,MAAA,MACA,OAAA,MACA,cAAA,KACA,OAAA,IAAA,MACA,SAAA,SACC,mBACG,QAAA,OACA,SAAA,SACA,OAAA,KACA,KAAA,KAGL,uBACC,WAAA,KACC,6BACG,QAAA,sBACA,MAAA,KAgBH,kBAPJ,YAQO,QChCwC,iDDoBpD,MACI,UAAA,OAeC,WACG,WAAA,OAGH,aACG,WAAA,OAGH,UAAM,YAAA,IACN,UAAM,YAAA,IACN,UAAM,YAAA,IACN,UAAM,YAAA,IACN,UAAM,YAAA,IACN,UAAM,YAAA,IACN,UAAM,YAAA,IACN,UAAM,YAAA,IACN,UAAM,YAAA,IAGX,WE+CE,MAAA,KF7CE,WAAA,KACA,QAAA,KACA,WAAA,KACA,cAAA,KAEC,gBACG,QAAA,EIoGJ,mBAAA,QAAA,ICjKQ,2BDkKR,WAAA,QAAA,IClKQ,2BLgEH,sBACG,QAAA,EAIP,oBACG,SAAA,SAEC,wBACG,SAAA,SACA,MAAA,KACA,OAAA,KACA,KAAA,EACA,IAAA,EACA,WAAA,KImFR,mBAAA,KAAA,ICjKQ,2BDkKR,WAAA,KAAA,IClKQ,2BLkFK,kDACL,KAAM,kBAMb,YACG,WAAA,KAEC,sBEYP,MAAO,iBAqES,YAAA,KAAsC,aAAA,KF/E5C,cAAA","sourcesContent":[".colours{\n    .nested-container();\n    div{\n        width: 200px;\n        height: 100px;\n        margin-bottom: 10px;\n        border: 1px solid;\n        position: relative;\n        &:after{\n            content: 'test';\n            position: absolute;\n            bottom: 10px;\n            left: 10px;\n        }\n    }\n    div.textcolor{\n        background: @text-color;\n        &:after{\n            content: ~'\"@text-color: ' @text-color ~'\"';\n            color: #fff;\n        }\n    }\n}\n\n.font{\n    font-size: @base-font-size;\n    margin-bottom: 10px;\n    font-family: @font-family;\n    &:after{\n        content: ~'\" - ' @font-family ~'\"';\n    }\n\n    &-serif{\n        margin-bottom: 10px;\n        font-family: @font-family-serif;\n        &:after{\n            content: ~'\" - ' @font-family-serif ~'\"';\n        }\n    }\n\n    &-norm{\n        font-style: normal;\n    }\n\n    &-italic{\n        font-style: italic;\n    }\n\n    &-100{ font-weight: 100; }\n    &-200{ font-weight: 200; }\n    &-300{ font-weight: 300; }\n    &-400{ font-weight: 400; }\n    &-500{ font-weight: 500; }\n    &-600{ font-weight: 600; }\n    &-700{ font-weight: 700; }\n    &-800{ font-weight: 800; }\n    &-900{ font-weight: 900; }\n}\n\n.animation{\n    .base-column-p();\n    background: #ccc;\n    padding: 15px;\n    margin-top: 15px;\n    margin-bottom: 15px;\n\n    &-fade{\n        opacity: 1;\n        .transition(opacity 0.3s @easeIn);\n\n        &:hover{\n            opacity: 0;\n        }\n    }\n\n    &-movement{\n        position: relative;\n\n        &-bar{\n            position: absolute;\n            width: 15px;\n            height: 100%;\n            left: 0;\n            top: 0;\n            background: #666;\n            .transition(left 0.8s @easeIn);\n        }\n\n        &:hover &-bar{\n            left: calc(100% ~\" -\" 15px);\n        }\n    }\n}\n\n.ratio{\n    &-test{\n        background: #ccc;\n\n        &-container{\n            .column-m(6, none);\n            margin-bottom: 20px;\n        }\n    }\n}","//== Typography ==//\n\n//font family\n@font-family:           'Helvetica Neue', 'Roboto', 'helveticaui';\n@font-family-serif:     'Helvetica Neue', 'Roboto', 'helveticaui';\n@icon-font:             \"FontAwesome\";\n@base-font-size:        1.5rem;\n\n//scale factors -- don't change\n@minor-second:          1.067;\n@major-second:          1.125;\n@minor-third:           1.2;\n@major-third:           1.25;\n@perfect-fourth:        1.333;\n@dim-fifth:             1.414;\n@perfect-fifth:         1.5;\n@minor-sixth:           1.6;\n@golden-section:        1.618;\n\n//margin ratios\n@margin-top:            1em;\n@margin-bottom:         0.66em;\n@margin-top-neg:        -0.25em;\n\n//lineheight ratios\n@h-line-height:         1.2;\n@p-line-height:         1.333;\n@line-height:           @p-line-height;\n\n//header vars\n@headings-font-family:  @font-family;\n@headings-font-weight:  700;\n@headings-color:        inherit;\n@strong-weight:         700;\n\n//fontsize\n.typeVars(@base-scale: @perfect-fourth, @base-size: @base-font-size){\n    //base font size and line height\n    @font-size:         @base-size;\n    @scale-factor:      @base-scale;\n\n    //heading font size\n    @font-size-h1:      round( (@font-size * 10) * pow(@scale-factor, 3) ) / 10;\n    @font-size-h2:      round( (@font-size * 10) * pow(@scale-factor, 2) ) / 10;\n    @font-size-h3:      round( (@font-size * 10) * pow(@scale-factor, 1) ) / 10;\n    @font-size-h4:      round( (@font-size * 10) * pow(@scale-factor, 0.5) ) / 10;\n    @font-size-h5:      @font-size;\n    @font-size-h6:      round( (@font-size * 10) * pow(@scale-factor, -1) ) / 10;\n}\n","//==========\n// Container\n//==========\n\n.container(@fluid: none, @gutterType: @default-gutterType) when (@fluid = fluid){\n\t#container-helpers.basic-container();\n    @media (min-width: @container-gutter-breakpoint){\n        padding-left:  @fluid-gutter;\n        padding-right: @fluid-gutter;\n    }\n}\n\n.container(@fluid: none, @gutterType: @default-gutterType) when (@fluid = fluid) and (@gutterType = pullin){\n\t#container-helpers.basic-container();\n    @media (min-width: @container-gutter-breakpoint){\n        padding-left:  @fluid-pull-in-gutter;\n        padding-right: @fluid-pull-in-gutter;\n    }\n}\n\n.container(@fluid: none, @gutterType: @default-gutterType) when (default()){\n\t#container-helpers.basic-container();\n\tmax-width: @max-container-width;\n    @media (min-width: @container-gutter-breakpoint){\n        padding-left:  @gutter;\n        padding-right: @gutter;\n    }\n}\n\n.nested-container(){\n    #container-helpers.nested-container();\n}\n\n#container-helpers{\n\t.nested-container(){\n\t\twidth: 100%;\n\t    .flexbox();\n\t    .flex-wrap(wrap);\n\t    .align-content(start);\n\t}\n\n\t.basic-container(){\n\t\tmargin-left: auto;\n\t\tmargin-right: auto;\n\t\t.nested-container();\n\t}\n}\n\n//========\n// Columns\n//========\n.base-column(@gutterType: @default-gutterType){\n\t@gridWidth: 100%;\n\t#column-helpers.getWidthType(@gutterType);\n}\n\n.base-column-m(){\n\t@gridWidth: 100%;\n\t@gutterType: margin;\n\t.gutter(@column-gutter-half, none, @gutterType);\n\t#column-helpers.getWidthType(@gutterType);\n}\n\n.base-column-p(){\n\t@gridWidth: 100%;\n\t@gutterType: padding;\n\t.gutter(@column-gutter-half, none, @gutterType);\n\t#column-helpers.getWidthType(@gutterType);\n}\n\n.column(@columns: @max-columns, @breakpoint: @default-breakpoint, @gutterType: @default-gutterType){\n\t#column-helpers.getColumnWidth(@columns, @breakpoint, @gutterType);\n}\n\n.column-m(@columns: @max-columns, @breakpoint: @default-breakpoint){\n\t@gutterType: margin;\n\t.gutter(@column-gutter-half, @breakpoint, @gutterType);\n\t.column(@columns, @breakpoint, @gutterType);\n}\n\n.column-p(@columns: @max-columns, @breakpoint: @default-breakpoint){\n\t@gutterType: padding;\n\t.gutter(@column-gutter-half, @breakpoint, @gutterType);\n\t.column(@columns, @breakpoint, @gutterType);\n}\n\n\n#column-helpers{\n\t.getColumnWidth(@columns, @breakpoint, @gutterType) when (@breakpoint = none){\n\t\t.cacluateWidth(@columns);\n\t\t.getWidthType(@gutterType);\n\t\t@rules();\n\t}\n\n\t.getColumnWidth(@columns, @breakpoint, @gutterType) when (default()){\n\t\t.getBreakpoint(@breakpoint);\n\t\t@media(min-width: @breakpointValue){\n\t\t\t.cacluateWidth(@columns);\n\t\t\t.getWidthType(@gutterType);\n\t\t\t@breakpointExtraRules();\n\t\t}\n\t}\n\n\n\n\t.getWidthType(@gutterType) when (@gutterType = padding){\n\t\twidth: @gridWidth;\n\t}\n\n\t.getWidthType(@gutterType) when (@gutterType = margin){\n\t\twidth: calc(@gridWidth ~\" -\" @column-gutter-calc-size);\n\t}\n\n\n\n\t.cacluateWidth(@columns) when (@columns >= @max-columns){\n        @gridWidth: 100%;\n    }\n    .cacluateWidth(@columns) when (@columns < 1){\n        @gridWidth: percentage( 1 / @max-columns );\n    }\n    .cacluateWidth(@columns) when (default()){\n        @gridWidth: percentage( @columns / @max-columns );\n    }\n\n\n\n\t.getBreakpoint(@breakpoint) when (@breakpoint = xs){\n        @breakpointValue: @xs-min;\n        @breakpointExtraRules: @xs-rules;\n    }\n    .getBreakpoint(@breakpoint) when (@breakpoint = sm){\n        @breakpointValue: @sm-min;\n        @breakpointExtraRules: @sm-rules;\n    }\n    .getBreakpoint(@breakpoint) when (@breakpoint = md){\n        @breakpointValue: @md-min;\n        @breakpointExtraRules: @md-rules;\n    }\n    .getBreakpoint(@breakpoint) when (@breakpoint = lg){\n        @breakpointValue: @lg-min;\n        @breakpointExtraRules: @lg-rules;\n    }\n    .getBreakpoint(@breakpoint) when (@breakpoint = xlg){\n        @breakpointValue: @xlg-min;\n        @breakpointExtraRules: @xlg-rules;\n    }\n}\n\n//=========\n// Gutter\n//=========\n\n.gutter(@gutter-size: @column-gutter-half, @breakpoint: @default-breakpoint, @gutterType: @default-gutterType){\n\t#gutter-helpers.setGutterRules(@gutter-size, @gutter-size, @gutterType);\n\t#gutter-helpers.setBreakpointRules(@breakpoint);\n\t@column-gutter-calc-size: (@gutter-size * 2);\n}\n\n.gutter-p(@gutter-size: @column-gutter-half, @breakpoint: @default-breakpoint){\n\t.gutter(@gutter-size, @breakpoint, padding);\n}\n\n.gutter-m(@gutter-size: @column-gutter-half, @breakpoint: @default-breakpoint){\n\t.gutter(@gutter-size, @breakpoint, margin);\n}\n\n.push(@column: 1, @gutter-size: @column-gutter-half, @breakpoint: @default-breakpoint, @gutterType: @default-gutterType){\n\t#column-helpers.cacluateWidth(@column);\n\t@gutter-size-left: calc(@gridWidth ~\" +\" @gutter-size);\n\t@gutter-size-right: @gutter-size;\n\t#gutter-helpers.setGutterRules(@gutter-size-left, @gutter-size-right, @gutterType);\n\t#gutter-helpers.setBreakpointRules(@breakpoint);\n\t@column-gutter-calc-size: (@gutter-size * 2);\n}\n\n#gutter-helpers{\n\t.setGutterRules(@gutter-size-left, @gutter-size-right, @gutterType) when (@gutter-size > 0){\n\t\t.getGutterType(@gutterType);\n\t\t@gutterRules: { @{gutterRuleLeft}: @gutter-size-left; @{gutterRuleRight}: @gutter-size-right; };\n\t}\n\n\t.setGutterRules(@gutter-size-left, @gutter-size-right, @gutterType) when (default()){\n\t\t.getGutterType(@gutterType);\n\t\t@gutterRules: {};\n\t}\n\n\t.getGutterType(@gutterType) when (@gutterType = padding){\n\t\t@gutterRuleLeft: padding-left;\n\t\t@gutterRuleRight: padding-right;\n\t}\n\n\t.getGutterType(@gutterType) when (@gutterType = margin){\n\t\t@gutterRuleLeft: margin-left;\n\t\t@gutterRuleRight: margin-right;\n\t}\n\n\t.setBreakpointRules(@breakpoint) when (@breakpoint = xs){\n        @xs-rules: @gutterRules;\n    }\n    .setBreakpointRules(@breakpoint) when (@breakpoint = sm){\n        @sm-rules: @gutterRules;\n    }\n    .setBreakpointRules(@breakpoint) when (@breakpoint = md){\n        @md-rules: @gutterRules;\n    }\n    .setBreakpointRules(@breakpoint) when (@breakpoint = lg){\n        @lg-rules: @gutterRules;\n    }\n    .setBreakpointRules(@breakpoint) when (@breakpoint = xlg){\n        @xlg-rules: @gutterRules;\n    }\n    .setBreakpointRules(@breakpoint) when (default()){\n\t\t@rules: @gutterRules;\n\t}\n}\n","// display: inline-flex //\n// applies to flex container\n\n.inline-flexbox() {\n  // 2009 spec\n  display: -webkit-box;\n  display: -moz-box;\n  display: -ms-box;\n  display: -o-box;\n  display: box;\n  // tweener -ms- spec\n  display: -ms-inline-flexbox;\n  // 2013 spec\n  display: -webkit-inline-flex;\n  display: -moz-inline-flex;\n  display: -ms-inline-flex;\n  display: -o-inline-flex;\n  display: inline-flex;\n}\n// display: flex //\n// applies to flex container\n\n.flexbox() {\n  // 2009 spec\n  display: -webkit-box;\n  display: -moz-box;\n  display: -ms-box;\n  display: -o-box;\n  display: box;\n  // // tweener -ms- spec\n  // display: -webkit-flexbox;\n  // display: -moz-flexbox;\n  display: -ms-flexbox;\n  // display: -o-flexbox;\n  // display: flexbox;\n  // 2013 spec\n  display: -webkit-flex;\n  display: -moz-flex;\n  display: -ms-flex;\n  display: -o-flex;\n  display: flex;\n}\n\n// flex //\n\n// applies to flex-items\n\n// specifying how items flex, in shorthand (like background property is shorthand)\n\n// 2009 spec is box-flex, and only accepts numbers with decimals\n// tweener -ms- spec and 2013 spec both use flex and contain 3 values instead of just one\n// tweener spec has different names for their values but the values do the same thing\n\n// 2009 spec only accepts a number (not just integer) as an input\n\n// tweener -ms- spec works as follows\n// -ms-flex: <positive-flex> <negative-flex> <preferred-size>\n// positive-flex is integer indicating whether item should grow\n// negative-flex is integer indicating whether item should shrink\n// preferred-size uses any valid value for width or height (i.e. px, em, rem, %)\n\n// 2013 spec works as follows\n// flex: <flex-grow> <flex-shrink> <flex-basis>\n// flex-grow is integer indicating whether item should grow\n// flex-shrink is integer indicating whether item should shrink\n// flex-basis  uses any valid value for width (i.e. px, em, rem, %)\n\n// handling when 2013 or tweener spec is 'none' instead of shorthand values\n.flex(@spec; @flex) when (@flex = none) and (@spec = 2013), (@spec = tweener) {\n// tweener -ms- spec is same as 2013\n// 2013 spec\n  -webkit-flex: 0 0 auto;\n  -moz-flex: 0 0 auto;\n  -ms-flex: 0 0 auto;\n  -o-flex: 0 0 auto;\n  flex: 0 0 auto;\n}\n\n\n// handling when 2013 or tweener spec is 'auto' instead of shorthand values\n.flex(@spec; @flex) when (@flex = auto) and (@spec = 2013), (@spec = tweener) {\n// tweener -ms- spec is same as 2013\n// 2013 spec\n  -webkit-flex: 1 1 auto;\n  -moz-flex: 1 1 auto;\n  -ms-flex: 1 1 auto;\n  -o-flex: 1 1 auto;\n  flex: 1 1 auto;\n}\n\n// handling when 2013 or tweener spec is 'initial' instead of shorthand values\n.flex(@spec; @flex) when (@flex = initial) and (@spec = 2013), (@spec = tweener) {\n// tweener -ms- spec is same as 2013\n// 2013 spec\n  -webkit-flex: 0 1 auto;\n  -moz-flex: 0 1 auto;\n  -ms-flex: 0 1 auto;\n  -o-flex: 0 1 auto;\n  flex: 0 1 auto;\n}\n\n// handling 2009 'none' value\n.flex(@spec; @grow) when (@grow = none) and (@spec = 2009) {\n// 2009 spec\n  -webkit-box-flex: 0.0;\n  -moz-box-flex: 0.0;\n  -ms-box-flex: 0.0;\n  -o-box-flex: 0.0;\n  box-flex: 0.0;\n}\n\n// handling remaining 2009 scenarios where it is not 'none'\n.flex(@spec; @grow) when (isnumber(@grow)) and (@spec = 2009) {\n  // 2009 spec (accepts only 1 integer value)\n    -webkit-box-flex: @grow;\n    -moz-box-flex: @grow;\n    -ms-box-flex: @grow;\n    -o-box-flex: @grow;\n    box-flex: @grow;\n}\n\n// this should cover all other scenarios that are not 2009 and/or not 'none'\n.flex(@spec; @grow; @shrink; @basis) when not (@spec = 2009) {\n  // tweener -ms- spec is same as 2013\n  // 2013 spec\n    -webkit-flex: @grow @shrink @basis;\n    -moz-flex: @grow @shrink @basis;\n    -ms-flex: @grow @shrink @basis;\n    -o-flex: @grow @shrink @basis;\n    flex: @grow @shrink @basis;\n}\n\n// flex-direction //\n\n// applies to flex container\n\n// 2009 spec\n.flex-direction(@direction) when (@direction = row) {\n  -webkit-box-orient: horizontal;\n  -moz-box-orient: horizontal;\n  -ms-box-orient: horizontal;\n  -o-box-orient: horizontal;\n  box-orient: horizontal;\n}\n// 2009 spec\n.flex-direction(@direction) when (@direction = row-reverse) {\n  -webkit-box-orient: horizontal;\n  -moz-box-orient: horizontal;\n  -ms-box-orient: horizontal;\n  -o-box-orient: horizontal;\n  box-orient: horizontal;\n  -webkit-box-direction: reverse;\n  -moz-box-direction: reverse;\n  -ms-box-direction: reverse;\n  -o-box-direction: reverse;\n  box-direction: reverse;\n}\n// 2009 spec\n.flex-direction(@direction) when (@direction = column) {\n  -webkit-box-orient: vertical;\n  -moz-box-orient: vertical;\n  -ms-box-orient: vertical;\n  -o-box-orient: vertical;\n  box-orient: vertical;\n}\n// 2009 spec\n.flex-direction(@direction) when (@direction = column-reverse) {\n  -webkit-box-orient: vertical;\n  -moz-box-orient: vertical;\n  -ms-box-orient: vertical;\n  -o-box-orient: vertical;\n  box-orient: vertical;\n  -webkit-box-direction: reverse;\n  -moz-box-direction: reverse;\n  -ms-box-direction: reverse;\n  -o-box-direction: reverse;\n  box-direction: reverse;\n}\n// 2013 spec\n.flex-direction(@direction) {\n  -webkit-flex-direction: @direction;\n  -moz-flex-direction: @direction;\n  -ms-flex-direction: @direction;\n  -o-flex-direction: @direction;\n  flex-direction: @direction;\n}\n\n// order //\n\n// applies to flex-items\n\n// specifies the order of an individual flex item within a container; this is an override of natural DOM order\n\n// 2009 spec is box-ordinal-group and starts at 1\n// tweener -ms- spec is flex-order and starts at 0\n// 2013 spec is order and starts at 0\n\n.order(@order) {\n// 2009 spec\n  -webkit-box-ordinal-group: @order + 1;\n  -moz-box-ordinal-group: @order + 1;\n  -ms-box-ordinal-group: @order + 1;\n  -o-box-ordinal-group: @order + 1;\n  box-ordinal-group: @order + 1;\n// tweener -ms- spec\n    -ms-flex-order: @order;\n// 2013 spec\n  -webkit-order: @order;\n  -moz-order: @order;\n  -ms-order: @order;\n  -o-order: @order;\n  order: @order;\n}\n\n// flex-wrap //\n\n// applies to flex container\n\n// 2009 property is box-lines\n// single == nowrap\n// multiple == wrap\n// no equivalent to wrap-reverse\n// initial = single\n\n// 2009 spec\n.flex-wrap(@wrap-method) when (@wrap-method = wrap) {\n  -webkit-lines: multiple;\n  -webkit-box-lines: multiple;\n  -moz-box-lines: multiple;\n  -ms-box-lines: multiple;\n  -o-box-lines: multiple;\n  box-lines: multiple;\n}\n\n//box lines doesn't have wrap reverse, so use box-direction\n// 2009 spec\n.flex-wrap(@wrap-method) when (@wrap-method = wrap-reverse) {\n  -webkit-lines: multiple;\n  -webkit-box-lines: multiple;\n  -moz-box-lines: multiple;\n  -ms-box-lines: multiple;\n  -o-box-lines: multiple;\n  box-lines: multiple;\n  -webkit-box-direction: reverse;\n  -moz-box-direction: reverse;\n  -ms-box-direction: reverse;\n  -o-box-direction: reverse;\n  box-direction: reverse;\n}\n\n// 2009 spec\n.flex-wrap(@wrap-method) when (@wrap-method = nowrap) {\n  -webkit-lines: single;\n  -webkit-box-lines: single;\n  -moz-box-lines: single;\n  -ms-box-lines: single;\n  -o-box-lines: single;\n  box-lines: single;\n}\n\n// 2013 spec is flex-wrap instead of box-lines\n// nowrap = single line LTR\n// wrap = multiple lines LTR\n// wrap-reverse = multiple lines, reversed children LTR\n// initial = nowrap\n// not inherited by default; spec inherit to force it\n\n// 2013 spec\n.flex-wrap(@wrap-method) {\n  -webkit-flex-wrap: @wrap-method;\n  -moz-flex-wrap: @wrap-method;\n  -ms-flex-wrap: @wrap-method;\n  -o-flex-wrap: @wrap-method;\n  flex-wrap: @wrap-method;\n}\n\n// align-items //\n\n// applies to flex container\n\n// Specifies the alignment of flex items within a container on the cross axis\n\n// 2009 property is box-align\n// tweener -ms- spec is flex-align\n// start == flex-start\n// end == flex-end\n// center == center\n// baseline == baseline\n// stretch = stretch\n\n.align-items(@align-item-method) when (@align-item-method = start) {\n// 2009 spec\n  -webkit-box-align: start;\n  -moz-box-align: start;\n  -ms-box-align: start;\n  -o-box-align: start;\n  box-align: start;\n// tweener -ms- spec\n  -ms-flex-align: start;\n// 2013 spec\n  -webkit-align-items: flex-start;\n  -moz-align-items: flex-start;\n  -ms-align-items: flex-start;\n  -o-align-items: flex-start;\n  align-items: flex-start;\n}\n\n.align-items(@align-item-method) when (@align-item-method = end) {\n  // 2009 spec\n    -webkit-box-align: end;\n    -moz-box-align: end;\n    -ms-box-align: end;\n    -o-box-align: end;\n    box-align: end;\n  // tweener -ms- spec\n    -ms-flex-align: end;\n  // 2013 spec\n  -webkit-align-items: flex-end;\n  -moz-align-items: flex-end;\n  -ms-align-items: flex-end;\n  -o-align-items: flex-end;\n  align-items: flex-end;\n}\n\n// for center, baseline, and stretch, which are the same in all specs\n.align-items(@align-item-method) when\n                                  (@align-item-method = center),\n                                  (@align-item-method = baseline),\n                                  (@align-item-method = stretch) {\n// 2009 spec\n  -webkit-box-align: @align-item-method;\n  -moz-box-align: @align-item-method;\n  -ms-box-align: @align-item-method;\n  -o-box-align: @align-item-method;\n  box-align: @align-item-method;\n// tweener -ms- spec\n  -ms-flex-align: @align-item-method;\n// 2013 spec\n  -webkit-align-items: @align-item-method;\n  -moz-align-items: @align-item-method;\n  -ms-align-items: @align-item-method;\n  -o-align-items: @align-item-method;\n  align-items: @align-item-method;\n}\n\n// align-self //\n\n// applies to flex-items\n\n// specifying an override alignment of an individual flex-item\n// within a container on the cross axis\n\n// 2009 spec does not have an equivalent fallback\n// tweener -ms- spec is flex-item-align\n// auto == auto\n// start == flex-start\n// end == flex-end\n// center == center\n// baseline == baseline\n// stretch = stretch\n\n.align-self(@align-self-method) when (@align-self-method = start) {\n// tweener -ms- spec\n  -ms-flex-item-align: @align-self-method;\n  flex-item-align: @align-self-method;\n// 2013 spec\n  -webkit-align-self: flex-start;\n  -moz-align-self: flex-start;\n  -ms-align-self: flex-start;\n  -o-align-self: flex-start;\n  align-self: flex-start;\n}\n\n.align-self(@align-self-method) when (@align-self-method = end) {\n// tweener -ms- spec\n  -ms-flex-item-align: @align-self-method;\n  flex-item-align: @align-self-method;\n// 2013 spec\n  -webkit-align-self: flex-end;\n  -moz-align-self: flex-end;\n  -ms-align-self: flex-end;\n  -o-align-self: flex-end;\n  align-self: flex-end;\n}\n\n// for auto, center, baseline, and stretch, which are the same in both specs\n.align-self(@align-self-method) when\n                                (@align-self-method = auto),\n                                (@align-self-method = center),\n                                (@align-self-method = baseline),\n                                (@align-self-method = stretch) {\n// tweener -ms- spec\n  -ms-flex-item-align: @align-self-method;\n  flex-item-align: @align-self-method;\n// 2013 spec\n  -webkit-align-self: @align-self-method;\n  -moz-align-self: @align-self-method;\n  -ms-align-self: @align-self-method;\n  -o-align-self: @align-self-method;\n  align-self: @align-self-method;\n}\n\n// Align Content //\n\n// applies to flex container\n\n// Flex line alignment: specifying alignment of flex lines (not individual items) along the cross-axis\n// note: only applies when there is more than one line of content\n\n// 2009 spec does not have an equivalent fallback\n// microsoft property is flex-line-pack\n// flex-end == end\n// flex-start == start\n// space-between == justify\n// space-around == distribute\n// center == center\n// stretch == stretch\n\n.align-content(@align-content-method) when (@align-content-method = start) {\n// tweener -ms- spec\n  -ms-flex-line-pack: @align-content-method;\n// 2013 spec\n  -webkit-align-content: flex-start;\n  -moz-align-content: flex-start;\n  -o-align-content: flex-start;\n  align-content: flex-start;\n}\n\n.align-content(@align-content-method) when (@align-content-method = end) {\n// tweener -ms- spec\n  -ms-flex-line-pack: @align-content-method;\n// 2013 spec\n  -webkit-align-content: flex-end;\n  -moz-align-content: flex-end;\n  -o-align-content: flex-end;\n  align-content: flex-end;\n}\n\n.align-content(@align-content-method) when (@align-content-method = space-between) {\n// tweener -ms- spec\n  -ms-flex-line-pack: justify;\n// 2013 spec\n  -webkit-align-content: space-between;\n  -moz-align-content: space-between;\n  -o-align-content: space-between;\n  align-content: space-between;\n}\n\n.align-content(@align-content-method) when (@align-content-method = space-around) {\n// tweener -ms- spec\n  -ms-flex-line-pack: distribute;\n// 2013 spec\n  -webkit-align-content: space-around;\n  -moz-align-content: space-around;\n  -o-align-content: space-around;\n  align-content: space-around;\n}\n\n.align-content(@align-content-method) when\n                                  (@align-content-method = center),\n                                  (@align-content-method = stretch) {\n// tweener -ms- spec\n  -ms-flex-line-pack: @align-content-method;\n// 2013 spec\n  -webkit-align-content: @align-content-method;\n  -moz-align-content: @align-content-method;\n  -o-align-content: @align-content-method;\n  align-content: @align-content-method;\n}\n\n// Justify Content //\n\n// applies to flex container\n\n// Main Axis Alignment: specifying the alignment of flex items within a container on the primary axis\n\n// 2009 spec == box-pack\n// tweener MS spec == flex-pack\n// current spec == justify-content\n\n// flex-start == start\n// center == center\n// flex-end == end\n// space-between == justify\n// space-around == distribute\n// 2009 spec does not support 'distribute' or 'space-around' property\n\n.justify-content(@justify-method) when (@justify-method = start) {\n  //2009\n  -webkit-box-pack: @justify-method;\n  -moz-box-pack: @justify-method;\n  -ms-box-pack: @justify-method;\n  -o-box-pack: @justify-method;\n  box-pack: @justify-method;\n//tweener -ms-\n  -ms-flex-pack: @justify-method;\n// current spec\n  -webkit-justify-content: flex-start;\n  -moz-justify-content: flex-start;\n  -ms-justify-content: flex-start;\n  -o-justify-content: flex-start;\n  justify-content: flex-start;\n}\n\n.justify-content(@justify-method) when (@justify-method = end) {\n// 2009 spec\n  -webkit-box-pack: @justify-method;\n  -moz-box-pack: @justify-method;\n  -ms-box-pack: @justify-method;\n  -o-box-pack: @justify-method;\n  box-pack: @justify-method;\n// tweener -ms- spec\n  -ms-flex-pack: @justify-method;\n// 2013 spec\n  -webkit-justify-content: flex-end;\n  -moz-justify-content: flex-end;\n  -ms-justify-content: flex-end;\n  -o-justify-content: flex-end;\n  justify-content: flex-end;\n}\n\n.justify-content(@justify-method) when (@justify-method = center) {\n// 2009 spec\n  -webkit-box-pack: center;\n  -moz-box-pack: center;\n// tweener -ms- spec\n  -ms-flex-pack: center;\n// 2013 spec\n  -webkit-justify-content: center;\n  -moz-justify-content: center;\n  -ms-justify-content: center;\n  -o-justify-content: center;\n  justify-content: center;\n}\n\n.justify-content(@justify-method) when (@justify-method = space-between) {\n// 2009 spec\n  -webkit-box-pack: justify;\n  -moz-box-pack: justify;\n// tweener -ms- spec\n  -ms-flex-pack: justify;\n// 2013 spec\n  -webkit-justify-content: space-between;\n  -moz-justify-content: space-between;\n  -ms-justify-content: space-between;\n  -o-justify-content: space-between;\n  justify-content: space-between;\n}\n\n.justify-content(@justify-method) when (@justify-method = space-around) {\n// 2009 spec has no equivalent\n// tweener -ms- spec\n  -ms-flex-pack: distribute;\n// 2013 spec\n  -webkit-justify-content: space-around;\n  -moz-justify-content: space-around;\n  -ms-justify-content: space-around;\n  -o-justify-content: space-around;\n  justify-content: space-around;\n}\n\n// flex-grow //\n\n// applies to flex-items\n\n// controls how an individual flex item in a flex container will grow\n// flex grow factor is a multiplier that determines how much a flex item grows relative to the other\n// items in the container\n\n// flex-grow is the first of three shorthand values in the flex property\n\n// 2009 spec has box-flex which is an effectively equivalent concept to flex-grow, since it only\n// controls positive growth of flex items\n\n.flex-grow(@multiplier) {\n// 2009 spec\n  -webkit-box-flex: @multiplier;\n// 2013 spec and tweener -ms- spec\n  -webkit-flex-grow: @multiplier;\n  -moz-box-flex: @multiplier;\n  -ms-flex: @multiplier 1 auto;\n  flex-grow: @multiplier;\n}\n\n// flex-shrink //\n\n// applies to flex-items\n\n// controls how an individual flex item in a flex container will shrink\n// flex shrink factor is a multiplier that determines how much a flex item shrinks relative to the other\n// items in the container\n\n// flex-shrink is the second of three shorthand values in the flex property\n\n// 2009 spec does not have an equivalent to flex-shrink\n// controls positive growth of flex items\n\n.flex-shrink(@multiplier) {\n// 2009 spec does not have an equivalent to flex-shrink\n// 2013 spec and tweener -ms- spec\n  -webkit-flex-shrink: @multiplier;\n  -ms-flex: 0 @multiplier auto;\n  flex-shrink: @multiplier;\n}\n\n// flex-basis //\n\n// applies to flex-items\n\n// controls initial width of a flex item, as specified by a standard width value, or 'auto'\n\n// flex-basis is the third of three shorthand values in the flex property\n\n// 2009 spec does not have an equivalent to flex-basis\n\n.flex-basis(@width) {\n// 2009 spec does not have an equivalent to flex-basis\n// 2013 spec and tweener -ms- spec\n  -webkit-flex-basis: @width;\n  -ms-flex: 0 1 @width;\n  flex-basis: @width;\n}\n\n// flex-flow //\n\n// applies to flex container\n\n// flex-flow is actually a shorthand combination of flex-direction and flex-wrap\n\n// flex-direction accepts row | row-reverse | column | column-reverse\n// flex-wrap accepts nowrap | wrap | wrap-reverse\n\n.flex-flow (@direction; @rest...) {\n  -webkit-flex-flow: @direction @rest;\n  -ms-flex-flow: @direction @rest;\n  flex-flow: @direction @rest;\n}\n","//---------------------------------------------------\n//  LESS Prefixer altered\n//---------------------------------------------------\n//\n//  All of the CSS3 fun, none of the prefixes!\n//\n//  As a rule, you can use the CSS properties you\n//  would expect just by adding a '.':\n//\n//  box-shadow => .box-shadow(@args)\n//\n//  Also, when shorthand is available, arguments are\n//  not parameterized. Learn CSS, not LESS Prefixer.\n//\n//  -------------------------------------------------\n//  TABLE OF CONTENTS\n//  (*) denotes a syntax-sugar helper\n//  -------------------------------------------------\n//\n//      .animation(@args)\n//          .animation-delay(@delay)\n//          .animation-direction(@direction)\n//          .animation-duration(@duration)\n//          .animation-fill-mode(@mode)\n//          .animation-iteration-count(@count)\n//          .animation-name(@name)\n//          .animation-play-state(@state)\n//          .animation-timing-function(@function)\n//      .columns(@args)\n//          .column-count(@count)\n//          .column-gap(@gap)\n//          .column-rule(@args)\n//          .column-width(@width)\n//      .transform(@args)\n//          .transform-origin(@args)\n//          .transform-style(@style)\n//          .rotate(@deg)\n//          .scale(@factor)\n//          .translate(@x,@y)\n//          .translate3d(@x,@y,@z)\n//          .translateHardware(@x,@y) *\n//      .transition(@args)\n//          .transition-delay(@delay)\n//          .transition-duration(@duration)\n//          .transition-property(@property)\n//          .transition-timing-function(@function)\n//\n//  Credit to LESS Elements for the motivation and\n//  to CSS3Please.com for implementation.\n//\n//  Copyright (c) 2012 Joel Sutherland\n//  MIT Licensed:\n//  http://www.opensource.org/licenses/mit-license.php\n//\n//---------------------------------------------------\n\n\n// Animation\n\n.animation(@args) {\n    -webkit-animation: @args;\n    animation: @args;\n}\n.animation-delay(@delay) {\n    -webkit-animation-delay: @delay;\n    animation-delay: @delay;\n}\n.animation-direction(@direction) {\n    -webkit-animation-direction: @direction;\n    -moz-animation-direction: @direction;\n    -ms-animation-direction: @direction;\n    -o-animation-direction: @direction;\n}\n.animation-duration(@duration) {\n    -webkit-animation-duration: @duration;\n    animation-duration: @duration;\n}\n.animation-fill-mode(@mode) {\n    -webkit-animation-fill-mode: @mode;\n    animation-fill-mode: @mode;\n}\n.animation-iteration-count(@count) {\n    -webkit-animation-iteration-count: @count;\n    animation-iteration-count: @count;\n}\n.animation-name(@name) {\n    -webkit-animation-name: @name;\n    animation-name: @name;\n}\n.animation-play-state(@state) {\n    -webkit-animation-play-state: @state;\n    animation-play-state: @state;\n}\n.animation-timing-function(@function) {\n    -webkit-animation-timing-function: @function;\n    animation-timing-function: @function;\n}\n\n\n// Columns\n\n.columns(@args) {\n    -webkit-columns: @args;\n    -moz-columns: @args;\n    columns: @args;\n}\n.column-count(@count) {\n    -webkit-column-count: @count;\n    -moz-column-count: @count;\n    column-count: @count;\n}\n.column-gap(@gap) {\n    -webkit-column-gap: @gap;\n    -moz-column-gap: @gap;\n    column-gap: @gap;\n}\n.column-width(@width) {\n    -webkit-column-width: @width;\n    -moz-column-width: @width;\n    column-width: @width;\n}\n.column-rule(@args) {\n    -webkit-column-rule: @args;\n    -moz-column-rule: @args;\n    column-rule: @args;\n}\n\n\n// Transforms\n\n.transform(@args) {\n    -webkit-transform: @args;\n    -ms-transform: @args;\n    transform: @args;\n}\n.transform-origin(@args) {\n    -webkit-transform-origin: @args;\n    -ms-transform-origin: @args;\n    transform-origin: @args;\n}\n.transform-style(@style) {\n    -webkit-transform-style: @style;\n    transform-style: @style;\n}\n.rotate(@deg:45deg){\n    .transform(rotate(@deg));\n}\n.scale(@factor:.5){\n    .transform(scale(@factor));\n}\n.translate(@x,@y){\n    .transform(translate(@x,@y));\n}\n.translate3d(@x,@y,@z) {\n    .transform(translate3d(@x,@y,@z));\n}\n.translateHardware(@x,@y) {\n    .translate(@x,@y);\n    -webkit-transform: translate3d(@x,@y,0);\n    -ms-transform: translate3d(@x,@y,0);\n    transform: translate3d(@x,@y,0);\n}\n\n\n// Transitions\n\n.transition(@args:200ms) {\n    -webkit-transition: @args;\n    transition: @args;\n}\n.transition-delay(@delay:0) {\n    -webkit-transition-delay: @delay;\n    transition-delay: @delay;\n}\n.transition-duration(@duration:200ms) {\n    -webkit-transition-duration: @duration;\n    transition-duration: @duration;\n}\n.transition-property(@property:all) {\n    -webkit-transition-property: @property;\n    transition-property: @property;\n}\n.transition-timing-function(@function:ease) {\n    -webkit-transition-timing-function: @function;\n    transition-timing-function: @function;\n}\n","//easing ideas\n\n// ease in with a small bounce, used on big slide ins etc\n@easeInBounce: \t\tcubic-bezier(0.03, 0.93, 0.72, 1.1);\n\n//basic ease in\n@easeIn: \t\t\tcubic-bezier(0.3, 0.15, 0.18, 1);\n"],"file":"styleguide.css","sourceRoot":"/source/"}