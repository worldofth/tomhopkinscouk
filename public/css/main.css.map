{"version":3,"file":"main.css","sources":["main.scss","base/mixins.scss","../../node_modules/mathsass/dist/_math.scss","../../node_modules/mathsass/dist/_constants.scss","../../node_modules/mathsass/dist/functions/_pow.scss","../../node_modules/mathsass/dist/functions/_fact.scss","../../node_modules/mathsass/dist/functions/_sqrt.scss","../../node_modules/mathsass/dist/functions/_exp.scss","../../node_modules/mathsass/dist/functions/_frexp.scss","../../node_modules/mathsass/dist/functions/_ldexp.scss","../../node_modules/mathsass/dist/functions/_log.scss","../../node_modules/mathsass/dist/functions/_sin.scss","../../node_modules/mathsass/dist/functions/_cos.scss","../../node_modules/mathsass/dist/functions/_tan.scss","../../node_modules/mathsass/dist/functions/_csc.scss","../../node_modules/mathsass/dist/functions/_sec.scss","../../node_modules/mathsass/dist/functions/_cot.scss","../../node_modules/mathsass/dist/functions/_asin.scss","../../node_modules/mathsass/dist/functions/_acos.scss","../../node_modules/mathsass/dist/functions/_atan.scss","../../node_modules/mathsass/dist/functions/_atan2.scss","../../node_modules/mathsass/dist/helpers/_strip-unit.scss","../../node_modules/mathsass/dist/helpers/_deg-to-rad.scss","../../node_modules/mathsass/dist/helpers/_rad-to-deg.scss","../../node_modules/mathsass/dist/helpers/_unitless-rad.scss","base/mixins/family.scss","base/mixins/common.scss","base/variables.scss","base/animation/easings.scss","base/animation/timings.scss","base/variables/color.scss","base/variables/tochange.scss","base/reset.scss","elements/html.scss","elements/body.scss","elements/buttons.scss"],"sourcesContent":["//====================\r\n// Vars/Mixins\r\n//====================\r\n@import \"base/mixins\";\r\n@import \"base/variables\";\r\n\r\n//====================\r\n// Base\r\n//====================\r\n@import \"base/reset\";\r\n\r\n//====================\r\n// Elements\r\n//====================\r\n@import \"elements/html\";\r\n@import \"elements/body\";\r\n@import \"elements/buttons\";\r\n\r\n.testing{\r\n\ttransition: color $userOutP1 $easeOut;\r\n}","@import \"../../../node_modules/mathsass/dist/math\";\r\n@import \"mixins/family\";\r\n@import \"mixins/common\";","// MathSass v0.9.5\n// https://github.com/terkel/mathsass\n//\n// Copyright (c) 2014 Takeru Suzuki - http://terkel.jp/\n// Licensed under the MIT license - http://opensource.org/licenses/MIT\n\n// Constants\n@import \"constants\";\n\n// Exponentiation\n@import \"functions/pow\";\n\n// Factorial\n@import \"functions/fact\";\n\n// Square root\n@import \"functions/sqrt\";\n\n// Exponential function\n@import \"functions/exp\";\n@import \"functions/frexp\";\n@import \"functions/ldexp\";\n\n// Logarithms\n@import \"functions/log\";\n\n// Trigonometric functions\n@import \"functions/sin\";\n@import \"functions/cos\";\n@import \"functions/tan\";\n@import \"functions/csc\";\n@import \"functions/sec\";\n@import \"functions/cot\";\n\n// Inverse trigonometric functions\n@import \"functions/asin\";\n@import \"functions/acos\";\n@import \"functions/atan\";\n@import \"functions/atan2\";\n\n// Helpers\n@import \"helpers/strip-unit\";\n@import \"helpers/deg-to-rad\";\n@import \"helpers/rad-to-deg\";\n@import \"helpers/unitless-rad\";\n","// Constants\n$E:     2.718281828459045;\n$PI:    3.141592653589793;\n$LN2:   0.6931471805599453;\n$SQRT2: 1.4142135623730951;\n","// Returns base to the exponent power.\n// @param {Number} $base The base number\n// @param {Number} $exp The exponent to which to raise base\n// @return {Number}\n// @example\n//     pow(4, 2)   // 16\n//     pow(4, -2)  // 0.0625\n//     pow(4, 0.2) // 1.31951\n@function pow ($base, $exp) {\n    @if $exp == floor($exp) {\n        $r: 1;\n        $s: 0;\n        @if $exp < 0 {\n            $exp: $exp * -1;\n            $s: 1;\n        }\n        @while $exp > 0 {\n            @if $exp % 2 == 1 {\n                $r: $r * $base;\n            }\n            $exp: floor($exp * 0.5);\n            $base: $base * $base;\n        }\n        @return if($s != 0, 1 / $r, $r);\n    } @else {\n        @return exp(log($base) * $exp);\n    }\n}\n","// Returns the factorial of a non-negative integer.\n// @param {Number} $x A non-negative integer.\n// @return {Number}\n// @example\n//     fact(0) // 1\n//     fact(8) // 40320\n@function fact ($x) {\n    @if $x < 0 or  $x != floor($x) {\n        @warn \"Argument for `fact()` must be a positive integer.\";\n        @return null;\n    }\n    $ret: 1;\n    @while $x > 0 {\n        $ret: $ret * $x;\n        $x: $x - 1;\n    }\n    @return $ret;\n}\n","// Returns the square root of a number.\n// @param {Number} $x\n// @example\n//     sqrt(2) // 1.41421\n//     sqrt(5) // 2.23607\n@function sqrt ($x) {\n    @if $x < 0 {\n        @warn \"Argument for `sqrt()` must be a positive number.\";\n        @return null;\n    }\n    $ret: 1;\n    @for $i from 1 through 24 {\n        $ret: $ret - (pow($ret, 2) - $x) / (2 * $ret);\n    }\n    @return $ret;\n}\n","// Returns E^x, where x is the argument, and E is Euler's constant, the base of the natural logarithms.\n// @param {Number} $x\n// @example\n//     exp(1)  // 2.71828\n//     exp(-1) // 0.36788\n@function exp ($x) {\n    $ret: 0;\n    @for $n from 0 to 24 {\n        $ret: $ret + pow($x, $n) / fact($n);\n    }\n    @return $ret;\n}\n","// Returns a two-element list containing the normalized fraction and exponent of number.\n// @param {Number} $x\n// @return {List} fraction, exponent\n@function frexp ($x) {\n    $exp: 0;\n    @if $x < 0 {\n        $x: $x * -1;\n    }\n    @if $x < 0.5 {\n        @while $x < 0.5 {\n            $x: $x * 2;\n            $exp: $exp - 1;\n        }\n    } @else if $x >= 1 {\n        @while $x >= 1 {\n            $x: $x / 2;\n            $exp: $exp + 1;\n        }\n    }\n    @return $x, $exp;\n}\n","// Returns $x * 2^$exp\n// @param {Number} $x\n// @param {Number} $exp\n@function ldexp ($x, $exp) {\n    $b: if($exp >= 0, 2, 1 / 2);\n    @if $exp < 0 {\n        $exp: $exp * -1;\n    }\n    @while $exp > 0 {\n        @if $exp % 2 == 1 {\n            $x: $x * $b;\n        }\n        $b: $b * $b;\n        $exp: floor($exp * 0.5);\n    }\n    @return $x;\n}\n","// Returns the natural logarithm of a number.\n// @param {Number} $x\n// @example\n//     log(2)  // 0.69315\n//     log(10) // 2.30259\n@function log ($x) {\n    @if $x <= 0 {\n        @return 0 / 0;\n    }\n    $k: nth(frexp($x / $SQRT2), 2);\n    $x: $x / ldexp(1, $k);\n    $x: ($x - 1) / ($x + 1);\n    $x2: $x * $x;\n    $i: 1;\n    $s: $x;\n    $sp: null;\n    @while $sp != $s {\n        $x: $x * $x2;\n        $i: $i + 2;\n        $sp: $s;\n        $s: $s + $x / $i;\n    }\n    @return $LN2 * $k + 2 * $s;\n}\n","// Returns the sine of a number.\n// @param {Number} $x A number in rad or deg. Assuming unitless number to be in rad.\n// @example\n//     sin(1.0472) // 0.86603\n//     sin(60deg)  // 0.86603\n@function sin ($x) {\n    $x: unitless-rad($x);\n    @return cos($x - $PI / 2);\n}\n","// Returns the cosine of a number.\n// @param {Number} $x A number in rad or deg. Assuming unitless number to be in rad.\n// @example\n//     cos(0.7854) // 0.70711\n//     cos(45deg)  // 0.70711\n@function cos ($x) {\n    $x: unitless-rad($x);\n    $ret: 0;\n    @for $n from 0 to 24 {\n        $ret: $ret + pow(-1, $n) * pow($x, 2 * $n) / fact(2 * $n);\n    }\n    @return $ret;\n}\n","// Returns the tangent of a number.\n// @param {Number} $x A number in rad or deg. Assuming unitless number to be in rad.\n// @example\n//     tan(0.5236) // 0.57735\n//     tan(30deg)  // 0.57735\n@function tan ($x) {\n    $x: unitless-rad($x);\n    @return sin($x) / cos($x);\n}\n","// Returns the cosecant of a number.\n// @param {Number} $x A number in rad or deg. Assuming unitless number to be in rad.\n// @example\n//     csc(1.0472) // 1.1547\n//     csc(60deg)  // 1.1547\n@function csc ($x) {\n    $x: unitless-rad($x);\n    @return 1 / sin($x);\n}\n","// Returns the secant of a number.\n// @param {Number} $x A number in rad or deg. Assuming unitless number to be in rad.\n// @example\n//     sec(0.7854) // 1.41422\n//     sec(45deg)  // 1.41422\n@function sec ($x) {\n    $x: unitless-rad($x);\n    @return 1 / cos($x);\n}\n","// Returns the cotangent of a number.\n// @param {Number} $x A number in rad or deg. Assuming unitless number to be in rad.\n// @example\n//     cot(0.5236) // 1.73205\n//     cot(30deg)  // 1.73205\n@function cot ($x) {\n    $x: unitless-rad($x);\n    @return 1 / tan($x);\n}\n","// Returns the arcsine of a number.\n// @param {Number} $x A number between -1 and 1.\n// @example\n//     asin(0.1) // 0.10017\n//     asin(-1)  // -1.5708\n@function asin ($x) {\n    @if $x > 1 or $x < -1 {\n        @warn \"Argument for `asin()` must be a number between -1 and 1\";\n        @return null;\n    }\n    @return atan($x / sqrt(1 - $x * $x));\n}\n","// Returns the arccosine of a number.\n// @param {Number} $x A number between -1 and 1.\n// @example\n//     acos(0.1) // 1.47063\n//     acos(-1)  // 3.14159\n@function acos ($x) {\n    @if $x > 1 or $x < -1 {\n        @warn \"Argument for `acos()` must be a number between -1 and 1\";\n        @return null;\n    }\n    @return $PI / 2 - asin($x);\n}\n","// Returns the arctangent of a number.\n// @param {Number} $x\n// @example\n//     atan(0.1) // 0.09967\n//     atan(-1)  // -0.7854\n@function atan ($x) {\n    $i:  24;\n    $sgn: 0;\n    $a:   0;\n    @if $x > 1 {\n        $sgn:  1;\n        $x:    1 / $x;\n    } @else if $x < -1 {\n        $sgn: -1;\n        $x:    1 / $x;\n    }\n    @while $i > 0 {\n        $a: ($i * $i * $x * $x) / (2 * $i + 1 + $a);\n        $i: $i - 1;\n    }\n    @if $sgn > 0 {\n        @return  $PI / 2 - $x / (1 + $a);\n    } @else if $sgn < 0 {\n        @return -$PI / 2 - $x / (1 + $a);\n    } @else {\n        @return            $x / (1 + $a);\n    }\n}\n","// Returns the arctangent of the quotient of its arguments.\n// @param {Number} $y\n// @param {Number} $x\n// @example\n//     atan2(0, 0)       // 0\n//     atan2(0, -0.0)    // 3.14159\n//     atan2(-0.0, 0)    // 0\n//     atan2(-0.0, -0.0) // -3.14159\n//     atan2(0, 1)       // 0\n//     atan2(0, -1)      // 3.14159\n@function atan2 ($y, $x) {\n    @if $x > 0 {\n        @return atan($y / $x);\n    } @else if $x < 0 {\n        @if $y < 0 {\n            @return atan($y / $x) - $PI;\n        } @else {\n            @return atan($y / $x) + $PI;\n        }\n    } @else {\n        @if $y < 0 {\n            @return - $PI / 2;\n        } @else if $y > 0 {\n            @return $PI / 2;\n        } @else {\n            @if 1 / $x == 1 / 0 {\n                @return 0;\n            } @else {\n                @if 1 / $y == 1 / 0 {\n                    @return $PI;\n                } @else {\n                    @return -$PI;\n                }\n            }\n        }\n    }\n}\n","// Strip unit from a number\n@function strip-unit ($number) {\n    @if unitless($number) {\n        @return $number;\n    } @else {\n        @return $number / ($number * 0 + 1);\n    }\n}\n","// Convert deg to rad\n@function deg-to-rad ($deg, $unit: true) {\n    @return strip-unit($deg) * $PI / 180 * if($unit, 1rad, 1);\n}\n","// Convert rad to deg\n@function rad-to-deg ($rad, $unit: true) {\n    @return strip-unit($rad) * 180 / $PI * if($unit, 1deg, 1);\n}\n","// Convert to unitless rad\n@function unitless-rad ($angle) {\n    @if unitless($angle) {\n        @return $angle;\n    } @else if unit($angle) == rad {\n        @return $angle / 1rad;\n    } @else if unit($angle) == deg {\n        @return deg-to-rad($angle, false);\n    } @else if type-of($angle) != number or not unitless($angle) {\n        @warn \"#{ $angle } is not a valid number.\";\n        @return $angle;\n    }\n}\n","/// Select all children from the first to `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin first($num) {\r\n\t@if $num == 1 {\r\n\t\t&:first-child {\r\n\t\t\t@content;\r\n\t\t}\r\n\t} @else {\r\n\t\t&:nth-child(-n + #{$num}) {\r\n\t\t\t@content;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/// Select all children from the last to `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin last($num) {\r\n\t&:nth-last-child(-n + #{$num}) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select all children after the first to `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin after-first($num) {\r\n\t&:nth-child(n + #{$num + 1}) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select all children before `$num` from the last.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin from-end($num) {\r\n\t&:nth-last-child(#{$num}) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select all children between `$first` and `$last`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin between($first, $last) {\r\n\t&:nth-child(n + #{$first}):nth-child(-n + #{$last}) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select all even children between `$first` and `$last`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin even-between($first, $last) {\r\n\t&:nth-child(even):nth-child(n + #{$first}):nth-child(-n + #{$last}) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select all odd children between `$first` and `$last`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin odd-between($first, $last) {\r\n\t&:nth-child(odd):nth-child(n + #{$first}):nth-child(-n + #{$last}) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select all `$num` children between `$first` and `$last`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin n-between($num, $first, $last) {\r\n\t&:nth-child(#{$num}n):nth-child(n + #{$first}):nth-child(-n + #{$last}) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n\r\n/// Select all children but `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin all-but($num) {\r\n\t&:not(:nth-child(#{$num})) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select children each `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n/// @alias every\r\n@mixin each($num) {\r\n\t&:nth-child(#{$num}n) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select children each `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin every($num) {\r\n\t&:nth-child(#{$num}n) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select the `$num` child from the start and the `$num` child from the last.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin from-first-last($num) {\r\n\t&:nth-child(#{$num}),\r\n\t&:nth-last-child(#{$num}) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n\r\n/// Select the item in the middle of `$num` child. Only works with odd number\r\n/// chain.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin middle($num) {\r\n\t&:nth-child(#{round($num / 2)}) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n\r\n/// Select all children between the `$num` first and the `$num` last.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin all-but-first-last($num) {\r\n\t&:nth-child(n + #{$num}):nth-last-child(n + #{$num}) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n\r\n/// This quantity-query mixin will only select the first of `$limit` items. It will not\r\n/// work if there is not as much as item as you set in `$limit`.\r\n/// @group Quantity queries\r\n/// @param {number} $limit\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin first-of($limit) {\r\n\t&:nth-last-child(#{$limit}):first-child {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// This quantity-query mixin will only select the last of `$limit` items. It will not\r\n/// if there is not as much as item as you set in `$limit`.\r\n/// @group Quantity queries\r\n/// @param {number} $limit\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin last-of($limit) {\r\n\t&:nth-of-type(#{$limit}):nth-last-of-type(1) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// This quantity-query mixin will select every items if there is at least `$num` items. It will not\r\n/// if there is not as much as item as you set in `$num`.\r\n/// @group Quantity queries\r\n/// @param {number} $limit\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin at-least($num) {\r\n\t$selector: &;\r\n\t$child: nth(nth($selector, -1), -1);\r\n\r\n\t&:nth-last-child(n + #{$num}),\r\n\t&:nth-last-child(n + #{$num}) ~ #{$child} {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// This quantity-query mixin will select every items if there is at most `$num` items. It will not\r\n/// if there is not as much as item as you set in `$num`.\r\n/// @group Quantity queries\r\n/// @param {number} $limit\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin at-most($num) {\r\n\t$selector: &;\r\n\t$child: nth(nth($selector, -1), -1);\r\n\r\n\t&:nth-last-child(-n + #{$num}):first-child,\r\n\t&:nth-last-child(-n + #{$num}):first-child ~ #{$child} {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// This quantity-query mixin will select every items only if there is between `$min` and `$max` items.\r\n/// @group Quantity queries\r\n/// @param {number} $limit\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin in-between($min, $max) {\r\n\t$selector: &;\r\n\t$child: nth(nth($selector, -1), -1);\r\n\r\n\t&:nth-last-child(n + #{$min}):nth-last-child(-n + #{$max}):first-child,\r\n\t&:nth-last-child(n + #{$min}):nth-last-child(-n + #{$max}):first-child ~ #{$child} {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select the first exact child\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin first-child() {\r\n\t&:first-of-type {\r\n\t\t@content\r\n\t}\r\n}\r\n\r\n/// Select the last exact child\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin last-child() {\r\n\t&:last-of-type {\r\n\t\t@content\r\n\t}\r\n}\r\n\r\n/// Select all even children.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin even() {\r\n\t&:nth-child(even) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select all odd children.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin odd() {\r\n\t&:nth-child(odd) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Select only the first and last child.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin first-last() {\r\n\t&:first-child,\r\n\t&:last-child {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Will only select the child if it’s unique.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @alias only\r\n@mixin unique() {\r\n\t&:only-child {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Will only select the child if it’s unique.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin only() {\r\n\t&:only-child {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n/// Will only select children if they are not unique. Meaning if there is at\r\n/// least 2 children, the style is applied.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin not-unique() {\r\n\t&:not(:only-child) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n\r\n/// This mixin is used to automatically sort z-index in numerical order. But it\r\n/// can also sort them in anti-numerical order, depending the parameters you use.\r\n/// @group using functions\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - Number of children\r\n/// @param {string} $direction [forward] - Direction of the sort\r\n/// @param {number} $index [0] - Index of the sorting\r\n@mixin child-index($num, $direction: 'forward', $index: 0) {\r\n\t@for $i from 1 through $num {\r\n\t\t@if ($direction == 'forward') {\r\n\t\t\t&:nth-child(#{$i}) {\r\n\t\t\t\tz-index: order-index($i, $index);\r\n\t\t\t\t@content;\r\n\t\t\t}\r\n\t\t} @else if ($direction == 'backward') {\r\n\t\t\t&:nth-last-child(#{$i}) {\r\n\t\t\t\tz-index: order-index($i, $index);\r\n\t\t\t\t@content;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/// Used by the child-index mixin. It will returned the proper sorted numbers\r\n/// depending on the `$index` value.\r\n/// @access private\r\n/// @param {number} $num - Number of children\r\n/// @param {number} $index - Index of the sorting\r\n@function order-index($i, $index) {\r\n\t@return ($index + $i);\r\n}\r\n","@function strip-unit($num){\r\n\t@return $num / ($num * 0 + 1);\r\n}\r\n\r\n@function unit($num, $unit){\r\n\t@return strip-unit($num) + $unit;\r\n}\r\n","@import \"animation/easings\";\r\n@import \"animation/timings\";\r\n@import \"variables/color\";\r\n@import \"variables/tochange\";","//====================\r\n// Easing\r\n//====================\r\n//user ease out\r\n$easeOut: \t\t\tcubic-bezier(0.3, 0.15, 0.18, 1);\r\n$easeOutBounce: \tcubic-bezier(0.3, 0.15, 0.18, 1.25);\r\n\r\n//fades and color changes\r\n$gradientCurve: \tcubic-bezier(0.46, 0.03, 0.52, 0.96);\r\n","//====================\r\n// timings\r\n//====================\r\n//user Out timing\r\n$userOut: 350ms;\r\n$userIn: 250ms;\r\n$long: 750ms;\r\n\r\n$timingScale: 1.2;\r\n\r\n$userOutP1: $userOut * pow($timingScale, 3);\r\n$userOutP2: $userOut * pow($timingScale, 2);\r\n$userOutP3: $userOut * pow($timingScale, 1);\r\n\r\n$userInP1: $userIn * pow($timingScale, 3);\r\n$userInP2: $userIn * pow($timingScale, 2);\r\n$userInP3: $userIn * pow($timingScale, 1);\r\n\r\n$longP1: $long * pow($timingScale, 3);\r\n$longP2: $long * pow($timingScale, 2);\r\n$longP3: $long * pow($timingScale, 1);\r\n","$text-color: #2e2e2e;\r\n$body-background-color: #fff;","$base-font-size: 1.6rem;\r\n$line-height: 1.5;\r\n$font-family: -apple-system, \r\n               BlinkMacSystemFont, \r\n               \"Segoe UI\", \r\n               Roboto, \r\n               Oxygen,\r\n               Ubuntu,\r\n               Cantarell,\r\n               \"Open Sans\",\r\n               \"Helvetica Neue\", \r\n               sans-serif;\r\n$base-font-weight: 400;","*,\r\n*:before,\r\n*:after{\r\n\tbox-sizing: border-box;\r\n}\r\n\r\nh1, h2, h3, h4, h5, h6, p, blockquote, button, figure{\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n}\r\n\r\narticle,\r\naside,\r\ndetails,\r\nfigcaption,\r\nfigure,\r\nfooter,\r\nheader,\r\nmain,\r\nblockquote,\r\nmenu,\r\nnav,\r\nsection,\r\nsummary{\r\n\tdisplay: block;\r\n}\r\n\r\nimg,\r\nobject,\r\nembed,\r\nvideo{\r\n\tdisplay: block;\r\n\tmax-width: 100%;\r\n\tborder: 0;\r\n}\r\n\r\nvideo{\r\n\theight: auto;\r\n}\r\n\r\n::-moz-focus-inner{\r\n\tpadding: 0;\r\n\tborder: 0;\r\n}\r\n\r\n:focus{\r\n\toutline: 0;\r\n}\r\n","html{\n\tfont-size: 62.5%;\n\t-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\t-ms-text-size-adjust: 100%;\n\t-webkit-text-size-adjust: 100%;\n}\n","body{\r\n\tfont-family: $font-family;\r\n\tcolor: $text-color;\r\n\tbackground-color: $body-background-color;\r\n\tmargin: 0;\r\n\t-moz-osx-font-smoothing: grayscale;\r\n\t-webkit-font-smoothing: antialiased;\r\n\tfont-kerning: normal;\r\n\toverflow-x: hidden;\r\n\tfont-weight: $base-font-weight;\r\n\r\n\tfont-size: unit($base-font-size, em);\r\n\tline-height: $line-height;\r\n}\r\n","button{\n\toverflow: visible;\n\tborder: 0;\n\tcursor: pointer;\n\tbackground: none;\n\t-webkit-font-smoothing: inherit;\n\tletter-spacing: inherit;\n\tfont: inherit;\n\n\t&:focus,\n\t&:active{\n\t\toutline: none;\n\t\tbox-shadow: none;\n\t}\n}\n"],"names":[],"mappings":"AgCAA,AAAA,CAAC;AACD,AAAA,CAAC,AAAA,OAAO;AACR,AAAA,CAAC,AAAA,MAAM,CAAA;EACN,UAAU,EAAE,UAAU,GACtB;;AAED,AAAA,EAAE,EAAE,AAAA,EAAE,EAAE,AAAA,EAAE,EAAE,AAAA,EAAE,EAAE,AAAA,EAAE,EAAE,AAAA,EAAE,EAAE,AAAA,CAAC,EAAE,AAAA,UAAU,EAAE,AAAA,MAAM,EAAE,AAAA,MAAM,CAAA;EACpD,MAAM,EAAE,CAAC;EACT,OAAO,EAAE,CAAC,GACV;;AAED,AAAA,OAAO;AACP,AAAA,KAAK;AACL,AAAA,OAAO;AACP,AAAA,UAAU;AACV,AAAA,MAAM;AACN,AAAA,MAAM;AACN,AAAA,MAAM;AACN,AAAA,IAAI;AACJ,AAAA,UAAU;AACV,AAAA,IAAI;AACJ,AAAA,GAAG;AACH,AAAA,OAAO;AACP,AAAA,OAAO,CAAA;EACN,OAAO,EAAE,KAAK,GACd;;AAED,AAAA,GAAG;AACH,AAAA,MAAM;AACN,AAAA,KAAK;AACL,AAAA,KAAK,CAAA;EACJ,OAAO,EAAE,KAAK;EACd,SAAS,EAAE,IAAI;EACf,MAAM,EAAE,CAAC,GACT;;AAED,AAAA,KAAK,CAAA;EACJ,MAAM,EAAE,IAAI,GACZ;;AAED,AAAA,kBAAkB,CAAA;EACjB,OAAO,EAAE,CAAC;EACV,MAAM,EAAE,CAAC,GACT;;AAED,AAAA,MAAM,CAAA;EACL,OAAO,EAAE,CAAC,GACV;;AC/CD,AAAA,IAAI,CAAA;EACH,SAAS,EAAE,KAAK;EAChB,2BAA2B,EAAE,WAAgB;EAC7C,oBAAoB,EAAE,IAAI;EAC1B,wBAAwB,EAAE,IAAI,GAC9B;;ACLD,AAAA,IAAI,CAAA;EACH,WAAW,EHCE,aAAa,EACZ,kBAAkB,EAClB,UAAU,EACV,MAAM,EACN,MAAM,EACN,MAAM,EACN,SAAS,EACT,WAAW,EACX,gBAAgB,EAChB,UAAU;EGTxB,KAAK,EJFO,OAAO;EIGnB,gBAAgB,EJFO,IAAI;EIG3B,MAAM,EAAE,CAAC;EACT,uBAAuB,EAAE,SAAS;EAClC,sBAAsB,EAAE,WAAW;EACnC,YAAY,EAAE,MAAM;EACpB,UAAU,EAAE,MAAM;EAClB,WAAW,EHGO,GAAG;EGDrB,SAAS,ERND,KAAwB;EQOhC,WAAW,EHXE,GAAG,GGYhB;;ACbD,AAAA,MAAM,CAAA;EACL,QAAQ,EAAE,OAAO;EACjB,MAAM,EAAE,CAAC;EACT,MAAM,EAAE,OAAO;EACf,UAAU,EAAE,IAAI;EAChB,sBAAsB,EAAE,OAAO;EAC/B,cAAc,EAAE,OAAO;EACvB,IAAI,EAAE,OAAO,GAOb;EAdD,AASC,MATK,AASL,MAAO,EATR,AAUC,MAVK,AAUL,OAAQ,CAAA;IACP,OAAO,EAAE,IAAI;IACb,UAAU,EAAE,IAAI,GAChB;;AnCKF,AAAA,QAAQ,CAAA;EACP,UAAU,EAAE,KAAK,C6BTN,OAA+B,CDN9B,gCAAgC,G5BgB5C"}